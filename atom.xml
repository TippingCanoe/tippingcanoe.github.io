<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Up The Creek]]></title>
  <link href="http://upthecreek.tippingcanoe.com/atom.xml" rel="self"/>
  <link href="http://upthecreek.tippingcanoe.com/"/>
  <updated>2014-01-24T15:24:30-06:00</updated>
  <id>http://upthecreek.tippingcanoe.com/</id>
  <author>
    <name><![CDATA[Tipping Canoe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Benchmarking Android Networking Libraries - Part 2: Installing Libraries]]></title>
    <link href="http://upthecreek.tippingcanoe.com/blog/2014/01/24/benchmarking-android-networking-libraries-part-2-installing-libraries/"/>
    <updated>2014-01-24T12:22:20-06:00</updated>
    <id>http://upthecreek.tippingcanoe.com/blog/2014/01/24/benchmarking-android-networking-libraries-part-2-installing-libraries</id>
    <content type="html"><![CDATA[<h2>Preamble</h2>

<p>Where we <a href="http://upthecreek.tippingcanoe.com/blog/2014/01/24/benchmarking-android-networking-libraries/">last left our heroes</a>, we&rsquo;d setup a <a href="http://github.com/TippingCanoe/rest-api-testbed">testbed</a> using <a href="http://www.laravel.com">Laravel 4</a> to compare the speeds Android networking libraries. This time around, we&rsquo;re going to look at creating an Android Application to test these libraries out.</p>

<h2>Creating the Application</h2>

<p>As mentioned in <a href="http://upthecreek.tippingcanoe.com/blog/2014/01/24/benchmarking-android-networking-libraries/">part one</a> of this discussion, using modern tools to build our Applications has become a big focus for us at <a href="http://tippingcanoe.com/">Tipping Canoe</a>. The new hotness of <a href="http://tools.android.com/tech-docs/new-build-system">Gradle</a> and <a href="http://developer.android.com/sdk/installing/studio.html">Android Studio</a> have replaced the old bustedness of Eclipse and ANT for us, so having libraries available in a format that gels with proper dependency management is a big win and, in our opinion, a litmus test for the quality of a library.</p>

<p>We&rsquo;ll use the Android Studio new project wizard to create our project.</p>

<p><img src="http://upthecreek.tippingcanoe.com/assets/new_project.png" alt="Android Studio new Application" /></p>

<p>Once the project has booted, a majority of the work will be done in the <code>build.gradle</code> file.<br/>
<em>Note: There are actually two <code>build.gradle</code> files, one in the outer project and one in the inner module for our Application. For the moment, the inner one is where we will be concentrating. However, at the time of writing a new update to Android Studio was pushed which introduced version <code>0.8</code> of the gradle plugin, which may have changed this.</em></p>

<p><img src="http://upthecreek.tippingcanoe.com/assets/new_project_done.png" alt="Android Studio new Application" /></p>

<p>The one improvement that I&rsquo;d suggest making is changing the <code>.gitignore</code> file. If you&rsquo;re working in a team all using Android Studio, there are actually a few settings in projects that you might want to share between your developers. Most <code>.gitignore</code> files will have you ignoring the entire <code>/.idea</code> folder, so you&rsquo;ll lose things like code style settings, which, in our mind, make sense to enforce and share amongst your team.</p>

<div><script src='https://gist.github.com/8605514.js'></script>
<noscript><pre><code># Built application files
/*/build/

# Crashlytics configuations
com_crashlytics_export_strings.xml

# Local configuration file (sdk path, etc)
local.properties

# Gradle generated files
.gradle/

# Signing files
.signing/

# User-specific configurations
.idea/libraries/
.idea/workspace.xml
.idea/tasks.xml
.idea/.name
.idea/compiler.xml
.idea/copyright/profiles_settings.xml
.idea/encodings.xml
.idea/misc.xml
.idea/modules.xml
.idea/scopes/scope_settings.xml
.idea/vcs.xml
*.iml

# OS-specific files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db</code></pre></noscript></div>


<h3>Installing Retrofit</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:+&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.squareup.retrofit:retrofit:1.3.0&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Installing Volley</h3>

<p><a href="http://developers.google.com/events/io/sessions/325304728">Volley</a> isn&rsquo;t available in Maven at the time of writing. In fact, finding a download for it at all is a little tricky. For shame, Google. Thankfully <a href="https://github.com/vinc3m1">Vince Mi</a> has done us a great service in wrapping Volley in Maven repository he calls <a href="https://github.com/ark/ark">Ark</a>.</p>

<p>So, we just need to add Ark.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>  <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">url</span> <span class="s1">&#39;https://raw.github.com/ark/ark/master/releases/&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">url</span> <span class="s1">&#39;https://raw.github.com/ark/ark/master/snapshots/&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then add Volley.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:+&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.android.frameworks:volley:master-SNAPSHOT&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Installing ion</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:+&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.koushikdutta.ion:ion:1.2.1&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Installing Robospice</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:+&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.octo.android.robospice:robospice:1.4.2&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Installing Picasso</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:+&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.squareup.picasso:picasso:2.1.1&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Thoughts</h2>

<p>Two things came up as a result of this,</p>

<p>First, it&rsquo;s interesting to note that the only library that fails at being dead simple to install and manage is the &ldquo;offical&rdquo; one provided by Google. As tempting as it is to assume that Google&rsquo;s solutions are always going to be the best, there&rsquo;s somewhat of a track record of projects being abandonded without warning to developers using or relying on them. The optimist would say that Google knows Gradle/Maven are going to be replaced by some secret project in the near future. The pessimest would say that this is a sign that Volley might not be a long-term supported project.</p>

<p>Second, this may be an extremely temporal thing that only exists at the time of writing, but Robo Spice generated an error while compiling;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew build
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>UNEXPECTED TOP-LEVEL EXCEPTION:
</span><span class='line'>com.android.dex.DexException: Multiple dex files define Landroid/support/v4/accessibilityservice/
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>What the heck? From the looks of that error message, something in Robo Spice is trying to include something that&rsquo;s conflicting with our version of the Android support library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew -q dependencies networkLibraryTest:dependencies
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>_debugApk
</span><span class='line'>+--- com.android.support:appcompat-v7:+ -&gt; 19.0.1
</span><span class='line'>|    <span class="se">\-</span>-- com.android.support:support-v4:19.0.1
</span><span class='line'>+--- com.squareup.retrofit:retrofit:1.3.0
</span><span class='line'>|    <span class="se">\-</span>-- com.google.code.gson:gson:2.2.4
</span><span class='line'>+--- com.android.frameworks:volley:master-SNAPSHOT
</span><span class='line'>+--- com.koushikdutta.ion:ion:1.2.1
</span><span class='line'>|    +--- com.google.code.gson:gson:2.2.4
</span><span class='line'>|    <span class="se">\-</span>-- com.koushikdutta.async:androidasync:1.2.1
</span><span class='line'>+--- com.octo.android.robospice:robospice:1.4.2
</span><span class='line'>|    <span class="se">\-</span>-- com.octo.android.robospice:robospice-cache:1.4.1
</span><span class='line'>|         +--- org.apache.commons:commons-lang3:3.1
</span><span class='line'>|         +--- org.apache.commons:commons-io:1.3.2
</span><span class='line'>|         |    <span class="se">\-</span>-- commons-io:commons-io:1.3.2
</span><span class='line'>|         <span class="se">\-</span>-- com.google.android:support-v4:r7
</span><span class='line'><span class="se">\-</span>-- com.squareup.picasso:picasso:2.1.1
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The solution was to top it from attempting to compile that module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">compile</span> <span class="o">(</span><span class="s1">&#39;com.octo.android.robospice:robospice:1.4.2&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;support-v4&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Scorecard</h2>

<table>
<thead>
<tr>
<th></th>
<th> Library   </th>
<th align="right"> Score </th>
<th> Notes                                     </th>
<th align="right"> Running Tally </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Retrofit  </td>
<td align="right">    +1 </td>
<td>                                           </td>
<td align="right">             1 |</td>
</tr>
<tr>
<td></td>
<td> Volley    </td>
<td align="right">    -1 </td>
<td> Not available in modern dependency tools. </td>
<td align="right">            -1 |</td>
</tr>
<tr>
<td></td>
<td> ion       </td>
<td align="right">    +1 </td>
<td>                                           </td>
<td align="right">             1 |</td>
</tr>
<tr>
<td></td>
<td> Robospice </td>
<td align="right">     0 </td>
<td>                                           </td>
<td align="right">             0 |</td>
</tr>
<tr>
<td></td>
<td> Picasso   </td>
<td align="right">    +1 </td>
<td>                                           </td>
<td align="right">             1 |</td>
</tr>
</tbody>
</table>


<h2>Repository</h2>

<p>I&rsquo;ve committed the source code for this example up to <a href="https://github.com/TippingCanoe/network-library-test/releases/tag/step-2">Github</a>.</p>

<h3>Next steps</h3>

<p>Next, we&rsquo;re going to look at performing basic REST requests in the different frameworks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarking Android networking libraries - Part 1: Rest API Testbed.]]></title>
    <link href="http://upthecreek.tippingcanoe.com/blog/2014/01/24/benchmarking-android-networking-libraries/"/>
    <updated>2014-01-24T08:39:46-06:00</updated>
    <id>http://upthecreek.tippingcanoe.com/blog/2014/01/24/benchmarking-android-networking-libraries</id>
    <content type="html"><![CDATA[<h2>Preamble</h2>

<p>Over the last few months here at <a href="http://tippingcanoe.com/">Tipping Canoe</a> we&rsquo;ve really been trying to up our Android development game. Our primary web-language, <a href="http://www.php.net/">PHP</a> has been going through somewhat of a renaissance, largely spurred by usage of <a href="https://getcomposer.org/">Composer</a> to think of your Application as a set of small, reusable, and interchangeable components controlled by a proper dependency management system. The Android world seems to be lagging behind on this, with a vast majority of tutorials online (including <a href="http://developer.android.com/tools/support-library/setup.html">loads from Google</a>) suggesting that manually copying <code>.jar</code> files around is a sane way of managing your Application&rsquo;s dependencies.</p>

<p><span class='pullquote-right' data-pullquote='if you&#8217;re using Eclipse and ANT, you&#8217;re doing modern Android development wrong'>
Luckily, it seems there might be light at the end of the tunnel. Thanks to the <a href="http://tools.android.com/tech-docs/new-build-system">&ldquo;new build system&rdquo;</a> powered by Gradle, Android developers can now declare their dependencies in a configuration file and have the build system be responsible for filling those dependencies. I&rsquo;ll hopefully be doing another blog post about our journey moving to this new way of doing things later, but the short version is, if you&rsquo;re using Eclipse and ANT, you&rsquo;re doing modern Android development wrong. Configuration-hell is a place you shouldn&rsquo;t have to live in.
</span></p>

<p>Since this change, the quality and quantity of open source Android libraries is slowly slowly starting to grow, and it&rsquo;s an important part of our job to vet what&rsquo;s available out there to make sure we&rsquo;re making the right decisions &mdash; which lead me to this experiment. A common theme across all of our current Applications is that they all rely on and communicate with a remote REST client and retrieve images and other resources from remote locations.</p>

<h2>Contenders</h2>

<p>After a bit or lurking in <a href="http://www.reddit.com/r/androiddev/">/r/androiddev</a>, here are what I believe to be the contenders.</p>

<p>For networking/REST;</p>

<ol>
<li><a href="http://square.github.io/retrofit/">Retrofit</a> by Square.</li>
<li><a href="http://developers.google.com/events/io/sessions/325304728">Volley</a> by Google.</li>
<li><a href="http://github.com/koush/ion">ion</a> by Koushik Dutta.</li>
<li><a href="http://github.com/octo-online/robospice">Robospice</a> by Octo Technology.</li>
</ol>


<p>For image loading;</p>

<ol>
<li><a href="http://developers.google.com/events/io/sessions/325304728">Volley</a> by Google.</li>
<li><a href="http://github.com/koush/ion">ion</a> by Koushik Dutta.</li>
<li><a href="http://square.github.io/picasso/">Picasso</a> by Square.</li>
</ol>


<h2>Testbed</h2>

<p>To accurately compare these libraries, we&rsquo;re going to need a simple testbed to act as a REST server. Lately, we&rsquo;ve been using <a href="http://laravel.com/">Laravel 4</a>, a PHP framework, for lots of our API development, so I&rsquo;m going to build a quick testbed using it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>composer create-project laravel/laravel testbed --prefer-dist
</span></code></pre></td></tr></table></div></figure>


<h3>Tables</h3>

<p>First, we&rsquo;re going to need a database to save our results to. For quick bootup, we&rsquo;re just going to go into the <code>/app/config/database.php</code> and setup a SQLite database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;default&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sqlite&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we&rsquo;ll need to create some database tables for some Models we&rsquo;re going to need storage for.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>php artisan migrate:make create_users_table --create<span class="o">=</span>users
</span><span class='line'>php artisan migrate:make create_requests_table --create<span class="o">=</span>requests
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll add some information to those tables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Schema</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">increments</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">boolean</span><span class="p">(</span><span class="s1">&#39;is_admin&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">timestamps</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Schema</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;requests&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">increments</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">integer</span><span class="p">(</span><span class="s1">&#39;client_id&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">unique</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">enum</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;parameters&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">enum</span><span class="p">(</span><span class="s1">&#39;engine&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;retrofit&#39;</span><span class="p">,</span> <span class="s1">&#39;volley&#39;</span><span class="p">,</span> <span class="s1">&#39;ion&#39;</span><span class="p">,</span> <span class="s1">&#39;robospice&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">timestamp</span><span class="p">(</span><span class="s1">&#39;start_time&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">timestamp</span><span class="p">(</span><span class="s1">&#39;end_time&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">timestamps</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we&rsquo;ll run those migrations to actually create the tables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>php artisan migrate
</span></code></pre></td></tr></table></div></figure>


<h3>Models</h3>

<p>Now that we&rsquo;ve got storage rolling, we&rsquo;ll need to make some Models.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Request</span> <span class="k">extends</span> <span class="nx">Eloquent</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$table</span> <span class="o">=</span> <span class="s1">&#39;requests&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$timestamps</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$softDelete</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="k">extends</span> <span class="nx">Eloquent</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$table</span> <span class="o">=</span> <span class="s1">&#39;users&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$timestamps</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$softDelete</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Routes</h3>

<p>And now we&rsquo;ll add some REST routes to the <code>/app/routes.php</code> file.<br/>
<em>Note: If you add code into your routes file like this, it&rsquo;ll make web-developers cry. Use Controllers.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$startTime</span> <span class="o">=</span> <span class="nb">time</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">filter</span><span class="p">(</span><span class="s1">&#39;requestEnd&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$route</span><span class="p">,</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$response</span><span class="p">,</span> <span class="nv">$startTime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$requestTiming</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RequestTiming</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">all</span><span class="p">());</span>
</span><span class='line'>  <span class="nv">$requestTiming</span><span class="o">-&gt;</span><span class="na">method</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">server</span><span class="p">(</span><span class="s1">&#39;REQUEST_METHOD&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$requestTiming</span><span class="o">-&gt;</span><span class="na">path</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$requestTiming</span><span class="o">-&gt;</span><span class="na">parameters</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">all</span><span class="p">());</span>
</span><span class='line'>  <span class="nv">$requestTiming</span><span class="o">-&gt;</span><span class="na">start_time</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s2">&quot;Y-m-d H:m:s&quot;</span><span class="p">,</span> <span class="nv">$startTime</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$requestTiming</span><span class="o">-&gt;</span><span class="na">end_time</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s2">&quot;Y-m-d H:m:s&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$requestTiming</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">group</span><span class="p">([</span><span class="s1">&#39;prefix&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;api&#39;</span><span class="p">,</span> <span class="s1">&#39;after&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;requestEnd:&#39;</span> <span class="o">.</span> <span class="nv">$startTime</span><span class="p">],</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Get some sample JSON</span>
</span><span class='line'>  <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">json</span><span class="p">(</span><span class="s2">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Get an array of all Users</span>
</span><span class='line'>  <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$users</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">all</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">json</span><span class="p">(</span><span class="nv">$users</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Get a specific User</span>
</span><span class='line'>  <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/user/{id}&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$user</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">findOrFail</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">json</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create a new User</span>
</span><span class='line'>  <span class="nx">Route</span><span class="o">::</span><span class="na">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$user</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">all</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="nv">$avatar</span> <span class="o">=</span> <span class="nx">Input</span><span class="o">::</span><span class="na">hasFile</span><span class="p">(</span><span class="s1">&#39;avatar&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$avatar</span><span class="o">-&gt;</span><span class="na">move</span><span class="p">(</span><span class="nx">storage_path</span><span class="p">(),</span> <span class="s2">&quot;avatar_&quot;</span> <span class="o">.</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">.</span> <span class="s2">&quot;.&quot;</span> <span class="o">.</span> <span class="nv">$avatar</span><span class="o">-&gt;</span><span class="na">getClientOriginalExtension</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">json</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Update a User</span>
</span><span class='line'>  <span class="nx">Route</span><span class="o">::</span><span class="na">post</span><span class="p">(</span><span class="s1">&#39;/user/{id}&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$user</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">findOrFail</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">all</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">json</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Repository</h2>

<p>I&rsquo;ve committed the source code for this example up to <a href="http://github.com/TippingCanoe/rest-api-testbed">Github</a>.</p>

<h2>Next steps</h2>

<p>Next, we&rsquo;re going to move over to Android and get these libraries installed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://upthecreek.tippingcanoe.com/blog/2014/01/21/hello-world/"/>
    <updated>2014-01-21T17:08:20-06:00</updated>
    <id>http://upthecreek.tippingcanoe.com/blog/2014/01/21/hello-world</id>
    <content type="html"><![CDATA[<p>Welcome aboard</p>
]]></content>
  </entry>
  
</feed>
